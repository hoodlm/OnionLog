using System;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Collections.Generic;

/**
 *  OnionLogger is a stack-based logging tool. Most logging utilities generate
 *  a monolithic block of logging statements. OnionLogger allows you to organize
 *  your logging statements hierarchally by pushing and popping layers on a
 *  stack. Each time you push a layer, your log is indented.
 * 
 *  Individual OnionLogger instances are not thread-safe. If you require logging
 *  for multiple threads, you must create a new OnionLogger for each thread and
 *  write to separate files.
 * 
 *  This tool is licensed under the MIT License, available here:
 *  http://opensource.org/licenses/MIT
 * 
 *  (C) 2014 Logan M Hood
 */
public class OnionLogger {
    
    /**
     * Static initialization block to set the millisecondsPerTick constant.
     */
    static OnionLogger() {
        millisecondsPerTick = 1000.0 / (double)Stopwatch.Frequency;
    }
    
    /**
     *  A useful constant for converting from ticks to milliseconds.
     */
    private static double millisecondsPerTick;

    /** A shared OnionLogger instance that can be used between multiple classes.
     *  You will have to instantiate it first.
     * 
     *  This is purely for convenience - under normal usage, it is probably a
     *  better practice to create your own wrapper class to hold a shared
     *  OnionLogger instance.
     */
    public static OnionLogger globalLog;

    /// The StreamWriter used to write to the logfile.
    private readonly StreamWriter writer;

    /** Defines the character used for indentation. Generally either a space or
     *  a tab.
     */
    private readonly char indentChar = ' ';

    /// The number of indentChar to use for each indentation. By default, 2.
    private readonly uint indentSize;
    
    /// The string to use for each indentation.
    /// (i.e. "indentChar" repeated "indentSize" times)
    private readonly string indentationString;

    /// The current stack of LogLayers.
    private readonly Stack<LogLayer> stack;

    /** 
     *  Create an instance of the OnionLogger class, with default settings:
     *  - filename is generated by the DefaultLogFilename method
     *  - indentChar is a space
     *  - indentSize is 2
     */
    public OnionLogger()
    {
        string filepath = "./"+DefaultLogFilename();
        indentSize = 2;
        StringBuilder sb = new StringBuilder();
        for (uint i = 0; i < indentSize; ++i) {
            sb.Append(indentChar);
        }
        indentationString = sb.ToString();
        
        stack = new Stack<LogLayer>();
        writer = new StreamWriter(filepath);
    }

    /** 
     *  Initializes a new instance of the OnionLogger class.
     *  @param filepath path to the logfile.
     */
    public OnionLogger(string filepath)
    {
        indentSize = 2;
        StringBuilder sb = new StringBuilder();
        for (uint i = 0; i < indentSize; ++i) {
            sb.Append(indentChar);
        }
        indentationString = sb.ToString();

        stack = new Stack<LogLayer>();
        writer = new StreamWriter(filepath);
    }
    
    /**
     *  Log a line with the INFO logging level.
     */
    public void Info(string message) {
        string indentedMessage = GetCurrentIndentation() + message;
        WriteLine(indentedMessage);
    }
    
    /**
     *  Pushes a new LogLayer onto the stack. This will log a message containing
     *  the name of the layer as well as the time that the layer was pushed.
     *  This also increases the indentation level.
     *  @param name The name of the LogLayer.
     */
    public void PushLayer(string name) {
        LogLayer layer = new LogLayer(name);
        string startMessage = GetCurrentIndentation() + layer.StartLayer();
        WriteLine(startMessage);
        stack.Push(layer);
    }

    /**
     *  Pops the most recent layer off of the stack. This will log a message
     *  containing the name of the layer as well as time elapsed since the layer
     *  was opened.
     */
    public void PopLayer() {
        if (stack.Count == 0) {
            return;
        }
        LogLayer popped = stack.Pop();
        string endMessage = GetCurrentIndentation() + popped.EndLayer();
        WriteLine(endMessage);
    }

    /**
     *  Helper method to build a string for the current indentation.
     */
    private string GetCurrentIndentation()
    {
        StringBuilder sb = new StringBuilder();
        for (uint i = 0; i < stack.Count; ++i) {
            sb.Append(indentationString);
        }
        return sb.ToString();
    }
    
    /**
     *  Write a string (including indentation) to the log file.
     *  Currently, this naively flushes the StreamWriter immediately after
     *  writing. Eventually this should be adjusted to flush less frequently
     *  for performance reasons (since flush is not asyncronous).
     */
    private void WriteLine(string s)
    {
        writer.WriteLine(s);
        writer.Flush();
    }
    
    /**
     *  Generates default log filename, which is a timestamp:
     *  YYYY-MM-DD-HH.MM.SS
     *  
     *  followed by the file extension ".txt".
     *  e.g. 1991-11-17-11.22.33.txt
     */
    public static string DefaultLogFilename() {
        string timestamp = 
            string.Format("{0}-{1}-{2}-{3}.{4}.{5}",
                          DateTime.Now.Year,
                          DateTime.Now.Month,
                          DateTime.Now.Day,
                          DateTime.Now.Hour,
                          DateTime.Now.Minute,
                          DateTime.Now.Second);
        return (timestamp + ".txt");
    }

    /**
     *  Each LogLayer represents a new hierarchical organizational level in the
     *  log. Instances of LogLayer are placed on the stack by an OnionLogger.
     */
    private class LogLayer {

        /// The name used to identify this LogLayer.
        private readonly string name;

        /// The stopwatch used to keep track of events in this layer.
        private readonly Stopwatch stopwatch;
        
        /**
         *  Instantiate a LogLayer
         *  @param name The name to identify this LogLayer.
         */     
        public LogLayer(string name)
        {
            this.name = name;
            this.stopwatch = new Stopwatch();
        }

        /**
         *  Starts this layer. This should be called just before pushing the
         *  LogLayer object onto the stack.
         * 
         *  @return a string with the name of the LogLayer and the Date & Time
         *  that it was started.
         */ 
        public string StartLayer()
        {
            stopwatch.Start();
            return string.Format("{0} started at {1}", this.name, DateTime.Now);
        }

        /**
         *  Ends this layer. This should be called just after popping the
         *  LogLayer object off of the stack.
         * 
         *  @return a string with the name of the LogLayer and the elapsed
         *  time (in ms) since it was started.
         */ 
        public string EndLayer()
        {
            stopwatch.Stop();
            double ms = millisecondsPerTick * (double)stopwatch.ElapsedTicks;
            return string.Format("{0} ended after {1}ms", this.name, ms);
        }
    }
}


